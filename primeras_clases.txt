Que son son los microservicios: son un conjunto de componentes pequeños que son autonomos que colaboran entre si, a diferencia de un proyecto grande donde se encuentra todas la funcionalidades.
A estos proyectos grandes que no se dividen en componentes pequeños y autonomos se les denomina Monolitos o monolitica.
La gran ventaja de los microservicios es la modularidad de las tareas.
Cada microservicio se puede conectar a diferentes base de datos(sql y nosql) o a una misma.
cada microservicio podria tener diferentes versiones y caracteristicas. Ejm: un microservicio podria estar conectado a una bd sql, utilizar x version de spring y utilizar solo el core de MVC, mientras que otro servicio podria estar conectado a una bd nosql, utilizar y version de spring y utilizar spring webflux para peticiones reactivas, hasta utilizar otros lenguajes y otras tecnologias.
Los microservicios son mas rapidos de desplegar y de liberar nuevas versiones a ambientes productivos.
Tambien son mas faciles de escalar en la nube, y mas versatiles para balancear cargas y levantar instancias por microservicio, a diferencia de un monolito que tendria que hacer una instancia por aplicacion completa, lo que se resume en poca escalabilidad y optimizacion de los recursos.

CARACTERISTICAS
	-Funcion unica por servicio.
	-Son independientes, cada uno se despliega en su propio servidor http, sin embargo se pueden conectar entre si. se pueden testear, monitorear, escalar, desplegar de forma independiente.
	-Registro y autodescubrimiento de servicios. desacopla de nuestro codigo la ip y el puerto de nuestro microservicio. En vez de configurar en codigo duro, se hace de manera automatica y en tiempo de ejecucion a traves de un identificador. Estos identificadores se registran en un servidor de nombres, como por ejemplo Eureka. Cuando el cliente requiere al servicio, se comunica con el servidor de nombre y este le da la ip y el puerto donde se ubica el servicio
	-Confiabilidad y tolerancia a fallos mediante hystrix de Netflix
	-Configuracion centralizada.
	

Spring boot DevTools esta en developer tools y reemplaza a DevTools

Spring Web Starter esta en Web (al final) y reemplaza a Web

Cuando se hace un DAO mediante Spring Data y se extiende la interfaz a CrudRepository, esta contendra las operaciones basicas CRUD para la base de datos.
NOTA: Aparte de dar las operaciones de CRUD, Marca la interfaz como component, por lo tanto es un Bean que está en el contenedor IoC y se puede inyectar en otras clases mediante @Autowired.

Para abrir varios microservicios en intelli j se puede crear un proyecto vacio y cuando esta dentro del proyecto, hacer click en File -> new -> module from existing source. Selecciona el proyecto y al abrir todos los microservicios el IDE los identifica como microservicios.

Cuando se tienen varios microservicios con clases en comun, se puede hacer un proyecto (comunmente denominado common) y se crean el codigo de clases y de utilidades en él.

Para consultar a otro servicio se debe configurar RestTemplate. RestTemplate permite la comunicacion entre servicios mediante protocolo HTTP REST de forma mas sencilla. Para configurar se debe hacer una clase anotada con @Configuration y se agrega al contenedor IoC mediante anotacion @Bean. 

Feign es una alternativa a RestTemplate es Feign, esta desarrollada por Netflix y forma del ecosistema de cloud, se integra con el balanceo de cargas de Ribbon y tambien viene configurado con los clientes de Eureka. Para utilizarla se debe anotar la clase main de Spring con @EnableFeignClients, con esto los inyecta al contenedor IoC.





